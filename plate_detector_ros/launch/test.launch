<?xml version="1.0" encoding="UTF-8"?>
<launch>
	<arg name="mav_name" default="firefly"/>

	<arg name="debug" default="false"/>
	<arg name="verbose" default="false"/>
	<arg name="gui" default="true"/>
	<arg name="paused" default="true"/>

	<arg name="world_name" default="default"/>
	<arg name="enable_logging" default="false" />
	<arg name="enable_ground_truth" default="true" />
	<arg name="log_file" default="$(arg mav_name)" />

	<arg name="start_x" default="-5.0"/>
	<arg name="start_y" default="0.0"/>
	<arg name="start_z" default="2.0"/>

	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find plate_detector_ros)/launch/test.world" />
		<arg name="debug" value="$(arg debug)"/>
		<arg name="paused" value="$(arg paused)"/>
		<arg name="gui" value="$(arg gui)"/>
		<arg name="verbose" value="$(arg verbose)"/>
	</include>

	<group ns="$(arg mav_name)">
		<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
			<arg name="mav_name" value="$(arg mav_name)" />
			<arg name="model" value="$(find iarc_simulation_tools)/urdf/firefly.gazebo" />
			<arg name="enable_logging" value="$(arg enable_logging)" />
			<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
			<arg name="log_file" value="$(arg log_file)"/>
			<arg name="x" default="$(arg start_x)"/>
			<arg name="y" default="$(arg start_y)"/>
		</include>

	  	<node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
    		<remap from="odometry" to="odometry_sensor1/odometry" />
      		<rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      		<rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      		<param name="use_rc_teleop" value="false"/>
      		<param name="verbose" value="true" />
      		<param name="reference_frame" value="world"/>
    	</node>

    	<node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      		<remap from="odometry" to="odometry_sensor1/odometry" />
      		<rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    	</node>

		<node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
			<param name="x" value="$(arg start_x)"/>
			<param name="y" value="$(arg start_y)"/>
			<param name="z" value="$(arg start_z)"/>
		</node>

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

		<node pkg="plate_detector_ros" type="plate_detector_ros_node" name="plate_detector_node" output="screen">
			<rosparam file="$(find plate_detector_ros)/config/param.yaml"/>
		</node>
		<node pkg="plate_pose_estimation_ros" type="pose_estimation_ros_node" name="pose_estimation_node">
		</node>
		
	</group>
  </launch>
